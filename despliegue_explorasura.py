# -*- coding: utf-8 -*-
"""Despliegue_con_streamlit-ExploraSura.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iuq8e6q3zYjysc3K5KoCKiOLqmwdMZdg

# Despliegue

- Cargamos el modelo
- Cargamos los datos futuros
- Preparar los datos futuros
- Aplicamos el modelo para la predicción
"""

#Cargamos librerías principales
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Cargamos el modelo
import pickle
filename = 'modelo_class_red_neuronal.pkl'
modelNN,labelencoder,variables, min_max_scaler = pickle.load(open(filename, 'rb'))

#Cargamos los datos futuros
#data = pd.read_csv("Datos_futuros_ExploraSura.csv", sep=';')
#data.head()

#Interfaz gráfica
# La librería streamlit transcribe el código python a html
#Se crea interfaz gráfica con streamlit para captura de los datos

import streamlit as st

st.title('Predicción de inversión en una tienda de videojuegos')

# Los nombres de las opciones de las listas deplegables deben ser exactamente iguales a las categorías en la BD
Edad = st.slider('Edad', min_value=0, max_value=111, value=20, step=1)
Sexo = st.selectbox('Sexo', ['M', 'F'])
Nivel_Estudios =('Nivel_Estudios', ["'SIN NIVEL EDUCATIVO'","TECNICA","SECUNDARIA","PRIMARIA","PROFESIONAL","ESPECIALIZACION","TECNOLOGICA","MAESTRIA","OTRO","DOCTORADO/POSTDOCTORADO"])
Regimen = st.selectbox('Regimen', ["CONTRIBUTIVO","SUBSIDIADO"])
Regional = st.selectbox('Regional', ["'REGIONAL ANTIOQUIA'","'REGIONAL EJE CAFETERO'","'REGIONAL NORTE'","'REGIONAL CENTRO'","'REGIONAL OCCIDENTE'"])
Estado_Civil = st.selectbox('Estado_Civil', ["'SIN INFORMACION DESDE LA FUENTE'", "'SOLTERO (A)'","'CASADO (A)'","'UNION LIBRE'","'SEPARADO (A)'", "'VIUDO (A)'"])
Nivel_Ingresos = st.selectbox('Nivel_Ingresos', ["'COTIZANTES CON INGRESOS INFERIORES A 2 SMLMV'", "'COTIZANTES CON INGRESOS ENTRE 2 Y 5 SMLMV'","','NIVEL 1 DEL SISBEN'","'COTIZANTES CON INGRESOS SUPERIORES A 5 SMLMV'","'NIVEL 2 DEL SISBEN"])
Ind_Masa_Corporal = st.selectbox('Ind_Masa_Corporal', ["SOBREPESO","'PESO NORMAL O SALUDABLE'","OBESIDAD","'BAJO PESO'"])
Ind_Ejercicio = st.selectbox('Ind_Ejercico', ["ND","N","S"])

#Dataframe
datos = [[Sexo,Edad,Nivel_Estudios,Regional,Regimen,Nivel_Ingresos,Estado_Civil,Ind_Masa_Corporal,Ind_Ejercicio]]
data = pd.DataFrame(datos, columns=['Edad','Sexo','Nivel_Estudios','Regimen','Regional','Estado_Civil','Nivel_Ingresos','Ind_Masa_Corporal','Ind_Ejercico']) #Dataframe con los mismos nombres de variables

#Se realiza la preparación
data_preparada=data.copy()

#En despliegue drop_first= False
data_preparada = pd.get_dummies(data_preparada, columns=['Sexo','Regimen', 'Nivel_Estudios','Regional','Nivel_Ingresos',
                                     'Estado_Civil','Ind_Masa_Corporal','Ind_Ejercicio'], drop_first=False)
#En despliegue no se borran dummies, siempre el drop_first va en falso porque nunca se borra dummy
data_preparada.head()

#Se adicionan las columnas faltantes
data_preparada=data_preparada.reindex(columns=variables,fill_value=0)
data_preparada.head()

"""# **Predicciones**"""

#Se normaliza la edad para predecir con Knn, Red
#En los despliegues no se llama fit
data_preparada[['Edad']]= min_max_scaler.transform(data_preparada[['Edad']])
data_preparada.head()

#Hacemos la predicción con Red Neuronal
Y_fut = modelNN.predict(data_preparada)
data['Neural_Network']=labelencoder.inverse_transform(Y_fut)
data.head()

print(Y_fut)

#Predicciones finales
data
